<job id="mklink-toho">
  <script language="JScript" src="config.js"/>
  <script language="JScript">

var oShell = new ActiveXObject("WScript.Shell");
var oFSO = new ActiveXObject("Scripting.FileSystemObject");


if (! userIsAdministrators()) {
    WScript.Echo("管理者権限付きで実行してください。");
    WScript.Quit();
}

SAVEDATA_DIR = oShell.expandEnvironmentStrings(SAVEDATA_DIR);
if (! oFSO.folderExists(SAVEDATA_DIR)) {
    WScript.Echo("SAVEDATA_DIR に指定されたパスが存在しません。\n" +
                 "config.js を編集してください。");
    WScript.Quit();
}




if (runCmd(['backup-toho-data.wsf', '/q'])) {
    WScript.Echo("既存のデータを退避できませんでした。");
    WScript.Quit();
}

var success = [];
var skipped = [];
var failed = [];
var ctx = {};
for (var name in PROG_INFO) {
    ctx = {name: name};

    var save_dir = SAVEDATA_DIR + "\\" + name;
    var prog_dir = PROG_INFO[name].dir;
    if (!oFSO.folderExists(save_dir) || !oFSO.folderExists(prog_dir)) {
        skipped.push(shallowCopy(ctx));
        continue;
    }

    for (var i in ENUM_KEYS) {
        var key = ENUM_KEYS[i];
        if (! PROG_INFO[name][key]) {
            continue;
        }
        ctx.key = key;
        ctx.prog_name = PROG_INFO[name][key].name;

        if (key === 'datadir') {
            var link = oShell.expandEnvironmentStrings(PROG_INFO[name][key].name);
            var target = save_dir;
            // 「%APPDATA%\ShanghaiAlice」は必要に応じて作られるため、
            // 存在しない可能性がある。
            runBuiltinCmd(['mkdir', oFSO.getParentFolderName(link)]);
        } else {
            var link = prog_dir + "\\" + PROG_INFO[name][key].name;
            var target = save_dir + "\\" + PROG_INFO[name][key].name;
        }
        ctx.link = link;
        ctx.target = target;
        // リンク元がないためスキップ
        if (! pathExists(target)) {
            skipped.push(shallowCopy(ctx));
            continue;
        }
        if (PROG_INFO[name][key].type === 'dir') {
            if (mklinkDir(link, target)) {
                success.push(shallowCopy(ctx));
            } else {
                failed.push(shallowCopy(ctx));
            }
        } else {
            if (mklinkFile(link, target)) {
                success.push(shallowCopy(ctx));
            } else {
                failed.push(shallowCopy(ctx));
            }
        }
    }
}

showMsg(success
        , "以下のファイルは SAVEDATA_DIR フォルダとリンクされました。"
        , function(msg, ctx) {
            msg += "\n  ";
            if (ctx.key === 'datadir') {
                msg += ctx.name + '/' + '<datadirのフォルダ>';
            } else {
                msg += ctx.name + '/' + ctx.prog_name;
            }
            return msg;
        }
);

showMsg(skipped
        , "以下のファイルはインストールされていなかったか、" +
            "SAVEDATA_DIR フォルダに該当フォルダがなかったため" +
            "リンクされませんでした。"
        , function(msg, ctx) {
            msg += "\n  ";
            if (!ctx.key) {
                msg += ctx.name;
            } else if (ctx.key === 'datadir') {
                msg += ctx.name + '/' + '<datadirのフォルダ>';
            } else {
                msg += ctx.name + '/' + ctx.prog_name;
            }
            return msg;
        }
);

showMsg(failed
        , "以下のファイルは SAVEDATA_DIR フォルダとのリンクに失敗しました。"
        , function(msg, ctx) {
            msg += "\n  ";
            if (ctx.key === 'datadir') {
                msg += ctx.name + '/' + '<datadirのフォルダ>';
            } else {
                msg += ctx.name + '/' + ctx.prog_name;
            }
            return msg;
        }
);




function backupDir(link, target, backupPath) {
    var BACKUP_SUCCESS = 1;
    var BACKUP_FAILED  = 0;
    var BACKUP_SKIPPED = 2;
    try {
        if (pathExists(link)) {
            if (linkExists(link, target)) {
                // リンクだった場合、削除する
                runBuiltinCmd(['rmdir', link]);
                return BACKUP_SKIPPED;
            } else {
                // リンクでなかった場合、バックアップする
                oFSO.moveFolder(link, backupPath);
                return BACKUP_SUCCESS;
            }
        }
        return BACKUP_SKIPPED;
    } catch (e) {
        return BACKUP_FAILED;
    }
}

// 例：「replay」→「replay_backup_yyyymmdd」
function getBackupDir(target) {
    if (! pathExists(target)) {
        return target;
    } else {
        return target + '_backup_' + makeYYYYMMDDString();
    }
}

function mklinkDir(link, target) {
    return !runBuiltinCmd(['mklink', '/j', link, target]);
}

function removeLinkFile(link, target) {
    var success = true;
    if (pathExists(link)) {
        if (linkExists(link, target)) {
            // リンクだった場合、削除する
            success = !runBuiltinCmd(['del', link]);
        }
    }
    return success;
}

function backupFile(link, target, backupPath) {
    var BACKUP_SUCCESS = 1;
    var BACKUP_FAILED  = 0;
    var BACKUP_SKIPPED = 2;
    try {
        if (pathExists(link)) {
            if (linkExists(link, target)) {
                // リンクだった場合、削除する
                runBuiltinCmd(['del', link]);
                return BACKUP_SKIPPED;
            } else {
                // リンクでなかった場合、バックアップする
                oFSO.moveFile(link, backupPath);
                return BACKUP_SUCCESS;
            }
        }
        return BACKUP_SKIPPED;
    } catch (e) {
        return BACKUP_FAILED;
    }
}

function getBackupFile(target) {
    if (! pathExists(target)) {
        return target;
    }

    // (例：「th08.cfg」→「th08_backup_yyyymmdd.cfg」)
    var dir = oFSO.getParentFolderName(target);
        dir = dir + (dir !== '' ? "\\" : '');
    var basename = oFSO.getBaseName(target);
    var ext = oFSO.getExtensionName(target);
        ext = (ext !== '' ? '.' : '') + ext;
    return dir + basename + '_backup_' + makeYYYYMMDDString() + ext;
}

function mklinkFile(link, target) {
    return !runBuiltinCmd(['mklink', '/h', link, target]);
}

function makeYYYYMMDDString() {
    var now = new Date();
    var year = now.getYear();
    var month = (now.getMonth() + 1);
        month = (month < 10 ? "0" : "") + month;
    var day = now.getDate();
        day = (day < 10 ? "0" : "") + day;
    return year + month + day;
}

function runBuiltinCmd(args) {
    return runCmd(['cmd', '/q', '/c'].concat(args));
}

function runCmd(args) {
    var cmdline = '';
    for (var i in args) {
        if (cmdline !== '') cmdline += ' ';
        cmdline += shellescape(args[i]);
    }
    var WS_NOTVISIVLE = 0;    // ウインドウ非表示
    var wait = true;          // 実行が終わるまで待つ
    // WScript.Echo(cmdline);
    return oShell.run(cmdline, WS_NOTVISIVLE, wait);
}

function linkExists(link, target) {
    if (oFSO.fileExists(link)) {
        if (oFSO.getFile(link).attributes & 1024) // Symlink
            return true;
        if (runCmd(['fc', link, target]) === 0) // Hard link
            return true;
    } else if (oFSO.folderExists(link)) { // Junction, Symlink
        return oFSO.getFolder(link).attributes & 1024;
    }
    return false;
}

function pathExists(path) {
    return oFSO.fileExists(path) || oFSO.folderExists(path)
}

function shellescape(arg) {
    if (arg.indexOf(' ') != -1) {
        arg = '"' + arg + '"';
    }
    return arg;
}

function showMsg(results, titleMsg, msgBuilder) {
    var msg = '';
    for (var i in results) {
        if (msg === '') {
            msg = titleMsg;
        }
        msg = msgBuilder(msg, results[i]);
    }
    if (msg !== '') {
        WScript.Echo(msg);
    }
}

function userIsAdministrators() {
    return !runBuiltinCmd("net user %USERNAME% | findstr Administrators");
}

function shallowCopy(obj) {
    var copy = {};
    for (var k in obj) {
        copy[k] = obj[k];
    }
    return copy;
}


</script>
</job>
